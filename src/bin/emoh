#!/bin/sh

# -----------------------------------------------------------------------
# >%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<
# -----------------------------------------------------------------------
#
# emoh
#
# TODO: description
#
# -----------------------------------------------------------------------
# LICENSE (New BSD):
#
# Copyright (c) 2010, Canaan Silberberg All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# The name of the author may not be used to endorse or promote products
# derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# -----------------------------------------------------------------------
# >%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<
# -----------------------------------------------------------------------

# -----------------------------------------------------------------------
# Shell Configuration
# -----------------------------------------------------------------------

set -e # any error causes an exit
set -u # accessing unset vars causes an error

# -----------------------------------------------------------------------
# Configuration
# -----------------------------------------------------------------------

export EXIT_SUCCESS=0;
export EXIT_ERROR=1;

export REPO=${HOME}/.emoh/repo
export GIT=/usr/bin/git

# -----------------------------------------------------------------------
# Error Handling
# -----------------------------------------------------------------------

##
# Prints usage information
#
usage()
{
  sed -e 's/    //' <<"  EOF"
    Usage:
        emoh command [command args]

    Commands:
        h, help: print this message
  EOF
}

##
# Exit with a fatal error
#
# @param $*
# The error message to display
#
fatal()
{
  echo $*
  exit $EXIT_ERROR;
}

# -----------------------------------------------------------------------
# Sanity Checks
# -----------------------------------------------------------------------

##
# Checks that the repository has no changes
#
check_repo_unchanged()
{
  if [ ! -z "$(cmd_git status --porcelain)" ]; then
    sed -e 's/      //' <<"    EOF"
      There are changes in your local repository.
      You may see the changes with
        emoh git status

      and commit or reset them with the standard git
      commands via
        emoh git <command>

      At present there is no force flag to override this check, sorry.
    EOF
    fatal "Operation canceled."
  fi
}

##
# Checks that the repository has been intialized
#
check_repo_exists()
{
  if [ ! -r ${REPO} ]; then
    sed -e 's/      //' <<"    EOF"
      Emoh is not yet initialized.
      You may initialize an empty repository with
        emoh init

      or clone an existing repository with
        emoh init url/for/repo.git

    EOF
    fatal "Operation canceled."
  fi
}

##
# Checks that a file is not presently managed
#
# @param $1
# The path to the file to check
#
check_file_ismanaged()
{
  if [ -e "${REPO}/${path}" ]; then
    echo "$1 appears to be managed already as ${REPO}/${path}."
    fatal "Operation canceled."
  fi
}

##
# Checks that a file is _not_ presently managed
#
# @param $1
# The path to the file to check
#
# @param $2
# The path within the repo for the file to check
#
check_file_notmanaged()
{
  if [ -z "$2" ]; then
    fatal "$1 appears not to be managed."
  fi

  if [ "$2" != $(readlink -fn $1) ]; then
    fatal "$1 appears not to be managed."
  fi
}

# -----------------------------------------------------------------------
# Utility Functions
# -----------------------------------------------------------------------

##
# Prints the relative path from ${HOME} for the given path
#
# @param $1
# The path to convert
#
relpath()
{
  echo -n $1 | sed "s!^${HOME}/!!"
}

##
# Copies a file to a temporary backup and
# prints the name of the new copy.
#
# @param $1
# The file for which to create a backup
#
backup_file()
{
  tmp=$(mktemp $1.orig.XXXXX)
  cp $1 ${tmp}
  echo -n ${tmp}
}

# -----------------------------------------------------------------------
# Operations
# -----------------------------------------------------------------------

##
# Sets up an initial (empty) repository
#
init_new()
{
  mkdir -p ${REPO}
  cd ${REPO}
  ${GIT} init
  echo repository created in: ${REPO}
}

##
# Clones an initial repository from a remote source
#
# @param $1
# The url from which to clone,
# ex: some/url/to/repo/.git
#
init_clone()
{
  ${GIT} clone "$1" ${REPO}
  echo repository created in: ${REPO}
}

##
# Rolls back a manage operation.
# TODO: docs
#
manage_rollback()
{
  echo An error occured while attempting to manage $1;

  rmdir $3 2> /dev/null || true
  mv $2 $1
}

##
# TODO: docs
#
manage()
{
  path=$(relpath $1)

  check_file_ismanaged ${path};
  check_repo_exists;
  check_repo_unchanged;

  backup=$(backup_file $1)
  targetdir="${REPO}"/$(dirname "${path}")

  trap "manage_rollback \"$1\" \"${backup}\" \"${targetdir}\"" ERR

  mkdir -p "${targetdir}" 2> /dev/null || true
  mv "$1" "${REPO}/${path}"
  ln -s "${REPO}/${path}" "${HOME}/${path}"

  trap - ERR

  rm "${backup}"
  cmd_git add ${path}
  cmd_git commit -q -m "emoh: now tracking ${path}"
}

##
# TODO: docs
#
unmanage()
{
  path=$(relpath $1)

  check_repo_exists;
  check_repo_unchanged;
  check_file_notmanaged "$1" "${REPO}/${path}";

  mv "${REPO}/${path}" "$1"
  cmd_git rm -q "${REPO}/${path}"
  cmd_git commit -q -m "emoh: no longer tracking ${path}"
}

# -----------------------------------------------------------------------
# User Commands
# -----------------------------------------------------------------------

##
# Intialize the repository:
# either clone from a remote source
# to create a new repository in ${REPO}
#
# @param $1
# (optional) remote repositoy to clone
#
cmd_init()
{
  if [ -e "${REPO}" ]; then
    fatal "A repository alreay exists at: ${REPO}. Aborting."
  fi

  if (( 0 < $# )); then
    init_clone "$1";
  else
    init_new;
  fi
}

##
# Provides direct git access to the repository
#
# @param $@
# The stuff to pass to git
#
cmd_git()
{
  check_repo_exists;

  cd ${REPO}
  ${GIT} "$@"
}

##
# Begin managing a file in the repository
#
# @param $1
# The path to the file to begin managing
#
cmd_manage()
{
  check_repo_exists;
  manage "$1";
}

##
# Stop managing a file
#
# @param $1
# The path to the file to stop managing
#
cmd_unmanage()
{
  check_repo_exists;
  unmanage "$1";
}


# -----------------------------------------------------------------------
# Main
# -----------------------------------------------------------------------

##
# Main
#
# @param $@
# Expects the full list of CLI args as $@
#
main()
{
  if (( 0 == $# )); then
    usage; exit ${EXIT_ERROR};
  fi

  case $1 in

    # command: help
    h*)
      usage; exit ${EXIT_SUCCESS}
      ;;

    # command: init
    init)
      shift;
      cmd_init "$@"
      ;;

    # command: git
    git)
      shift;
      cmd_git "$@"
      ;;

    # command: manage
    manage)
      cmd_manage "$2"
      ;;

    # command: unmanage
    unmanage)
      cmd_unmanage "$2"
      ;;

    # command: <unknown>
    *)
      echo -e Error: Unknown argument $1 '\n';
      usage; exit ${EXIT_ERROR};
      ;;

  esac
}

main "$@";
