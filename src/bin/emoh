#!/bin/sh

# -----------------------------------------------------------------------
# >%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<
# -----------------------------------------------------------------------
#
# emoh
#
# TODO: description
#
# -----------------------------------------------------------------------
# LICENSE (New BSD):
#
# Copyright (c) 2010, Canaan Silberberg All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# The name of the author may not be used to endorse or promote products
# derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# -----------------------------------------------------------------------
# >%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<#>%<
# -----------------------------------------------------------------------

# -----------------------------------------------------------------------
# Shell Configuration
# -----------------------------------------------------------------------

set -e # any error causes an exit
set -u # accessing unset vars causes an error

# -----------------------------------------------------------------------
# Configuration
# -----------------------------------------------------------------------

export EXIT_SUCCESS=0;
export EXIT_ERROR=1;

export REPO=$HOME/.emoh/repo
export GIT=/usr/bin/git

# -----------------------------------------------------------------------
# Utility Funcs
# -----------------------------------------------------------------------

##
# Prints usage information
#
usage()
{
  sed -e 's/    //' <<"  EOF"
    Usage:
        emoh command [command args]

    Commands:
        h, help: print this message
  EOF
}

##
# Exit with a fatal error
#
# @param $*
# The error message to display
#
fatal()
{
  echo $*
  exit $EXIT_ERROR;
}

##
# TODO: docs
#
gitcheck()
{
  if [ ! -z "$(cmd_git status --porcelain)" ];
  then
    sed -e 's/      //' <<"    EOF"
      There are changes in your local repository.
      This may be cleared up with the "emoh git status" command and such.
      At present there is no force flag to override this check, sorry.
    EOF
    fatal "Operation canceled."
  fi
}

##
# Sets up intial repository, if required
#
initcheck()
{
  if [ ! -r $REPO ];
  then
    fatal "emoh is not yet initialized."
  fi
}

##
# Setup initial repository
#
initrepo()
{
  mkdir -p $REPO
  cd $REPO
  $GIT init
  echo repository created in: $REPO
}

##
# TODO: docs
#
relpath()
{
  echo -n $1 | sed "s!^$HOME/!!"
}

##
# TODO: docs
#
backup_file()
{
  tmp=$(mktemp $1.orig.XXXXX)
  cp $1 $tmp
  echo -n $tmp
}

##
# TODO: docs
#
managecheck()
{
  if [ -e "$REPO/$path" ];
  then
    fatal "$1 appears to be managed already as $REPO/$path."
  fi
}

##
# TODO: docs
#
manage()
{
  path=$(relpath $1)

  managecheck $path;
  initcheck;
  gitcheck;

  backup=$(backup_file $1)
  targetdir="$REPO"/$(dirname "$path")

  trap "manage_rollback \"$1\" \"$backup\" \"$targetdir\"" ERR

  mkdir -p "$targetdir" 2> /dev/null || true
  mv "$1" "$REPO/$path"
  ln -s "$REPO/$path" "$HOME/$path"

  trap - ERR

  rm "$backup"
  cmd_git add $path
  cmd_git commit -q -m "now tracking $path"
}

##
# TODO: docs
#
manage_rollback()
{
  echo An error occured while attempting to manage $1;

  rmdir $3 2> /dev/null || true
  mv $2 $1
}

##
# TODO: docs
#
unmanagecheck()
{
  if [ -z "$2" ];
  then
    fatal "$1 appears not to be managed."
  fi

  location=$(readlink -fn $1)

  if [ "$REPO/$path" != "$location" ];
  then
    fatal "$1 appears not to be managed."
  fi
}

##
# TODO: docs
#
unmanage()
{
  path=$(relpath $1)

  unmanagecheck $1 $path;
  initcheck;
  gitcheck;

  mv "$REPO/$path" $1
  cmd_git rm "$REPO/$path"
  cmd_git commit -q -m "no longer tracking $path"
}

# -----------------------------------------------------------------------
# User Commands
# -----------------------------------------------------------------------


##
# Provides direct git access to the repository
#
# @param $@
# The stuff to pass to git
#
cmd_git()
{
  initcheck;

  cd $REPO
  $GIT "$@"
}


##
# Begin managing a file in the repository
#
# @param $1
# The path to the file to begin managing
#
cmd_manage()
{
  initcheck;
  manage "$1";
}


##
# Stop managing a file
#
# @param $1
# The path to the file to stop managing
#
cmd_unmanage()
{
  initcheck;
  unmanage "$1";
}


# -----------------------------------------------------------------------
# Main
# -----------------------------------------------------------------------

##
# Main
#
# @param $@
# Expects the full list of CLI args as $@
#
main()
{
  case $1 in

    # command: help
    h*)
      usage; exit $EXIT_SUCCESS
      ;;

    # command: help
    git)
      shift;
      cmd_git "$@"
      ;;

    # command: manage
    manage)
      cmd_manage "$2"
      ;;

    # command: unmanage
    unmanage)
      cmd_unmanage "$2"
      ;;

    # command: <unknown>
    *)
      echo -e Error: Unknown argument $1 '\n';
      usage; exit $EXIT_ERROR;
      ;;

  esac
}

main "$@";
